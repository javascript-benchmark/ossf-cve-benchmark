import * as fs from "fs";
import * as path from "path";
import { getToolsRoot } from "../util";
import { Config } from "../persistent-types";

export default async (config: Config) => {
  if (!config["config-file"]) {
    console.warn(
      `This command works best when with a configuration file (config.json).
See docs/configuration.md and docs/analysis-tools.md for details.`
    );
  }

  let toolsRoot = getToolsRoot();
  let configured = config.tools ? Object.keys(config.tools) : [],
    readmes = fs
      .readdirSync(toolsRoot)
      .map(f => path.join(toolsRoot, f, "README.md"))
      .filter(f => fs.existsSync(f)),
    installers = fs
      .readdirSync(toolsRoot)
      .map(f => path.join(toolsRoot, f, "installers"))
      .filter(d => fs.existsSync(d) && fs.lstatSync(d).isDirectory())
      .flatMap(d => fs.readdirSync(d).map(f => path.join(d, f)))
      .filter(f => {
        try {
          fs.accessSync(f, fs.constants.X_OK);
          return true;
        } catch (e) {
          return false;
        }
      });
  console.log(
    [
      `Configured tools in configuration${
        config["config-file"] ? ` ${path.resolve(config["config-file"])}` : ""
      }:`,
      ...configured.map(t => `- ${t}`),
      "",
      "Available driver installers:",
      ...installers
        .map(f => path.relative(".", f))
        .sort()
        .map(t => `- ${t}`),
      "",
      "Available driver READMEs:",
      ...readmes
        .map(f => path.relative(".", f))
        .sort()
        .map(t => `- ${t}`)
    ].join("\n")
  );
};
