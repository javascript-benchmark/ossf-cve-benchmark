import * as selectors from "../selectors";
import { Config, CVEString } from "../persistent-types";
import {
  readBCVEFiles,
  readStdinLines,
  setDifference,
  setIntersection
} from "../util";

export default async function (
  config: Config,
  args: {
    selectors: string[];
    invert_match: boolean;
    allow_incomplete: boolean;
    non_fatal_validation_errors: boolean;
  }
) {
  function toCVEs(selectorstrings: string[]): Set<CVEString> {
    return new Set(
      selectors
        .filter(
          selectorstrings.map(selectors.parse),
          readBCVEFiles(
            config.bcves,
            config.sources,
            args.allow_incomplete,
            !args.non_fatal_validation_errors
          )
        )
        .map(bcve => bcve.CVE)
    );
  }
  let stdInCVEs = toCVEs(
    (await readStdinLines()).filter(selectors.filterRawInputLine)
  );
  let argCVEs = toCVEs(args.selectors);
  let result = args.invert_match
    ? setDifference(stdInCVEs, argCVEs)
    : setIntersection(stdInCVEs, argCVEs);
  result.forEach(l => console.log(l));
}
