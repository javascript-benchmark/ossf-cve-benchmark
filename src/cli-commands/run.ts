import * as fs from "fs";
import * as os from "os";
import * as path from "path";
import * as bcvesFromCLI from "../bcves-from-cli";
import { BCVE, Config, ToolID } from "../persistent-types";
import { spawnChildProcess, UserError, writeDriverInputsFile } from "../util";

/**
 * Runs `toolID` on `bcves`, using `config` and `args`.
 */
async function run(
  toolID: ToolID,
  bcves: BCVE[],
  config: Config,
  args: {
    non_fatal_validation_errors: boolean;
  }
) {
  let tool = config.tools[toolID],
    tmp = fs.mkdtempSync(path.join(os.tmpdir(), "bcves-run-")),
    driverInputs = path.join(tmp, "driver-inputs.json");

  writeDriverInputsFile(
    driverInputs,
    {
      bcves,
      config,
      toolID
    },
    !args.non_fatal_validation_errors
  );
  fs.mkdirSync(config.results, { recursive: true });
  await spawnChildProcess(tool.bin, [...tool.args, driverInputs], true, true);
}

export default async (
  config: Config,
  args: {
    selectors: string[];
    tool: ToolID[];
    allow_incomplete: boolean;
    non_fatal_validation_errors: boolean;
  }
) => {
  if (!config["config-file"] || config.tools === undefined) {
    throw new UserError(
      `This command requires a configuration file (config.json) with a '.tools' object.
See docs/configuration.md and docs/analysis-tools.md for details.`
    );
  }

  let docReference = `Register tools by adding them to the '.tools' object of the configuration file.
See "docs/analysis-tools.md" for details.`;

  if (Object.keys(config.tools).length === 0) {
    throw new UserError(
      `No tools registered in the configuration file: can not run anything.
${docReference}`
    );
  }
  let bcves = await bcvesFromCLI.getBCVEsWithRuns(config, args, true);

  for (let toolID of args.tool) {
    if (!config.tools[toolID]) {
      throw new UserError(
        `No config entry for tool at config.tools["${toolID}"].

Available tools: ${JSON.stringify(Object.keys(config.tools))} }.

${docReference}`
      );
    }
  }
  if (
    fs.existsSync(config.results) &&
    !fs.lstatSync(config.results).isDirectory
  ) {
    throw new UserError(
      `Results directory ${config.results} is not a directory`
    );
  }
  for await (let toolID of args.tool) {
    await run(toolID, bcves, config, args);
  }
};
