/**
 * JSON schema validation for the pesistent types of this project.
 */
import Ajv from "ajv";
import * as path from "path";
import { File } from "./persistent-types";
import { getProjectRoot, readJSONFile } from "./util";

export enum SchemaName {
  BCVE = "BCVE",
  Log = "Log",
  Export = "Export",
  Config = "Config",
  DriverInputs = "DriverInputs"
}

/**
 * @return the schema file and id for `name`.
 */
function getSchema(name: SchemaName | "ts-defs"): { file: File; id: string } {
  let schema = {
    file: path.resolve(
      path.join(
        path.resolve(path.join(getProjectRoot(), "schemas")),
        `${name}.schema.json`
      )
    ),
    id: `https://github.com/ossf-cve-benchmark/ossf-cve-benchmark/schemas/${name}.schema.json`
  };
  return schema;
}

/**
 * @return the JSON schema id for `schemaName`
 */
export function getSchemaID(schema: SchemaName): string {
  return getSchema(schema).id;
}

/**
 * @return a JSON schema validator for the persistent types of this project.
 */
export function makeValidator(allErrors = false): Ajv.Ajv {
  let validator = new Ajv({
    schemas: [...Object.keys(SchemaName), "ts-defs"].map(name =>
      readJSONFile(getSchema(name as any).file)
    ),
    allErrors: allErrors
  });
  return validator;
}

/**
 * Validates `o` with respect to `schemaName`, throwing an error if `fatal` is true and the validation fails.
 * Validation failures are explained with `file` if present.
 */
export function validateSingle( // eslint-disable-line @typescript-eslint/explicit-module-boundary-types
  o: any,
  schemaName: SchemaName,
  fatal: boolean,
  file?: File
): void {
  let ajv = makeValidator(),
    valid = ajv.validate(getSchemaID(schemaName), o);
  if (!valid) {
    let msg = `${SchemaName[schemaName]}-Validation error ${
      file ? `for ${file}` : ""
    }: '${ajv.errorsText()}'`;
    if (fatal) {
      throw new Error(msg);
    } else {
      console.warn(`WARNING: ${msg}`);
    }
  }
}
