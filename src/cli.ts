/**
 * This is the implementation of the commandline interface for ossf-cve-benchmark.
 * This is the file that is run by the `bin/cli` commands mentioned throughout the documentation of this projects.
 */

import downloadCommitsCommand from "./cli-commands/download-commits";
import exportCommand from "./cli-commands/export";
import filterCommand from "./cli-commands/filter";
import listCommand from "./cli-commands/list";
import reportCommand from "./cli-commands/report";
import runCommand from "./cli-commands/run";
import toolsCommand from "./cli-commands/tools";
import uploadCommitsCommand from "./cli-commands/upload-commits";
import validateCommand from "./cli-commands/validate";
import {
  Command,
  getCommandName,
  mkCommandlineParser
} from "./CommandlineParser";
import { getConfig } from "./config";
import { Config } from "./persistent-types";

type CLIArg = string | string[] | boolean | number;

/**
 * The entry point for the `bin/cli` commandline script.
 */
function main() {
  const commands: Map<
    Command,
    (config: Config, args: { [option: string]: CLIArg }) => Promise<void>
  > = new Map();

  commands.set(Command.DOWNLOAD_COMMITS, downloadCommitsCommand);
  commands.set(Command.RUN, runCommand);
  commands.set(Command.EXPORT, exportCommand);
  commands.set(Command.REPORT, reportCommand);
  commands.set(Command.UPLOAD_COMMITS, uploadCommitsCommand);
  commands.set(Command.TOOLS, toolsCommand);
  commands.set(Command.VALIDATE, validateCommand);
  commands.set(Command.LIST, listCommand);
  commands.set(Command.FILTER, filterCommand);

  let parser = mkCommandlineParser(false);
  let args: {
    [option: string]: CLIArg;
    command: string;
  } = parser.parse_args();
  let { command, ...options } = args;

  let commandFunction;
  for (let [k, v] of commands.entries()) {
    if (getCommandName(k) === command) {
      commandFunction = v;
    }
  }
  if (!commandFunction) {
    console.error(`Error: Command '${command}' does not exist:`);
    parser.print_help();
    process.exit(1);
  }

  let config = getConfig(options);
  commandFunction(config, args)
    .then(() => process.exit(0))
    .catch((e: Error) => {
      if (e.message.startsWith("User error: ")) {
        console.error(e.message);
        process.exit(1);
      } else {
        console.error(`Error: Command '${command}' failed:`);
        console.error(e.message);
        console.error(e.stack);
        process.exit(2);
      }
    });
}

main();
