/**
 * Tests that the whole pipeline of downloading, running and generating reports works for the builtin drivers.
 *
 * To run this test:
 *
 * - the `CVEB_INTEGRATION_TEST_TOOLS` environment variable must be set to a value that corresponds to the `tools` property of a configuration file.
 *
 * To run this test with a `<driver-1>` and `<driver-2>`:
 *
 * - set `CVEB_INTEGRATION_TEST_TOOLS` environment variable to something like `{ "driver-1-id": { "bin": "node", "args": [...], "options": ...}, "driver-2-id": { "bin": "node", "args": [...], "options": ...} }`
 *
 * The installation steps for `<driver>` is not performed by this tests.
 */
import * as cp from "child_process";
import * as fs from "fs";
import * as os from "os";
import * as path from "path";
import { DriverConfig } from "../../../src/persistent-types";
import {
  getProjectRoot,
  spawnChildProcess,
  writeJSONFile
} from "../../../src/util";

function describeif(name: string, condition: () => boolean, cb: () => void) {
  if (condition()) {
    describe(name, cb);
  } else {
    describe.skip(name, cb);
  }
}

let TOOLS_VAR = "CVEB_INTEGRATION_TEST_TOOLS";
let CVES_VAR = "CVEB_INTEGRATION_TEST_CVES";
describeif(
  "Multiple tools and multiple CVEs",
  () => !!process.env[TOOLS_VAR],
  () => {
    let tmpRoot = fs.mkdtempSync(
        path.join(os.tmpdir(), `multiple-tools-multiple-cves-run-`)
      ),
      sourcesDir = path.join(tmpRoot, "sources"),
      reportsDir = path.join(tmpRoot, "reports"),
      bcvesDir = path.join(getProjectRoot(), "CVEs"),
      allResultsDir = path.join(tmpRoot, "results"),
      configFile = path.join(tmpRoot, "config.json"),
      ext = os.platform() === "win32" ? "cmd" : "sh",
      cli = path.join(getProjectRoot(), "bin", `cli.${ext}`),
      CVEs = (process.env[CVES_VAR] && JSON.parse(process.env[CVES_VAR])) || [
        "CVE-2018-16492",
        "CVE-2020-4066"
      ]; // from README.md

    fs.mkdirSync(reportsDir);
    fs.mkdirSync(sourcesDir);
    fs.mkdirSync(allResultsDir);

    let targets: {
      [toolID: string]: DriverConfig<any>;
    } = process.env[TOOLS_VAR] ? JSON.parse(process.env[TOOLS_VAR]) : {};

    describeif(
      "bin/cli download-commits",
      () => Object.keys(targets).length > 0,
      () => {
        test("Downloads", () => {
          expect(fs.readdirSync(sourcesDir)).toHaveLength(0);
          cp.execFileSync(cli, [
            "download-commits",
            "--sources",
            sourcesDir,
            "--bcves",
            bcvesDir,
            "--anonymous",
            ...CVEs
          ]);
        });
        test("Did download", () => {
          expect(fs.readdirSync(sourcesDir)).toHaveLength(CVEs.length);
        });
      }
    );

    for (let toolID in targets) {
      describe(`bin/cli run --tool ${toolID}`, () => {
        let toolResultsDir = path.join(tmpRoot, `results_${toolID}`);
        beforeAll(() => {
          writeJSONFile(configFile, { tools: targets });
        });

        test("Can run configured driver (slow)", async () => {
          jest.setTimeout(15 * 60 * 1000);
          fs.mkdirSync(toolResultsDir);
          expect(fs.readdirSync(toolResultsDir)).toHaveLength(0);
          await spawnChildProcess(
            cli,
            [
              "run",
              "--config-file",
              configFile,
              "--sources",
              sourcesDir,
              "--results",
              toolResultsDir,
              "--bcves",
              bcvesDir,
              "--tool",
              toolID,
              ...CVEs
            ],
            false,
            false
          );
          expect(fs.readdirSync(toolResultsDir)).toHaveLength(2 * CVEs.length);
          jest.setTimeout(5 * 1000);
        });
        test("Generates valid results", () => {
          cp.execFileSync(cli, ["validate", "--schema", "Log", toolResultsDir]);
          // copy the results to the shared directory
          fs.readdirSync(toolResultsDir).forEach(n =>
            fs.copyFileSync(
              path.join(toolResultsDir, n),
              path.join(allResultsDir, n)
            )
          );
        });
      });
    }
    describe("bin/cli report", () => {
      test("Can generte txt reports", () => {
        expect(fs.readdirSync(reportsDir)).toHaveLength(0);
        cp.execFileSync(cli, [
          "report",
          "--kind",
          "txt",
          "--results",
          allResultsDir,
          "--bcves",
          bcvesDir,
          "--reports",
          reportsDir,
          ...CVEs
        ]);
      });
      function getRunStatusFile() {
        return path.join(reportsDir, "Run-status-for-prePatch-runs-table.txt");
      }
      test("Did generate txt reports", () => {
        expect(fs.readdirSync(reportsDir).length).toBeGreaterThan(0);
        expect(
          fs.existsSync(path.join(reportsDir, "Overview-table.txt"))
        ).toBeTruthy();
        expect(fs.existsSync(getRunStatusFile())).toBeTruthy();
      });

      Object.keys(targets).forEach(toolID => {
        test(`Generated report containing '${toolID}'`, () => {
          let runStatus = fs.readFileSync(getRunStatusFile(), "utf8");
          expect(runStatus).toContain(" " + toolID + " ");
        });
      });
      test(`Had no CRASH results`, () => {
        let runStatus = fs.readFileSync(getRunStatusFile(), "utf8");
        expect(runStatus).not.toContain(" CRASH ");
      });
    });
  }
);
